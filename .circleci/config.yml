version: '2.1'

orbs:
  rust: circleci/rust@1.6.0
  go: circleci/go@1.7.0

jobs:
  cargo_fetch:
    executor:
      name: rust/default
    steps:
      - checkout
      - rust/install:
          version: nightly
      - run:
          # we don't check the lockfile in; this is needed for cache restoration/saving
          name: generate lockfile
          command: |
            cargo generate-lockfile
      - restore_rustup_cache
      - persist_to_workspace:
          root: "."
          paths:
            - Cargo.lock
      - run: cargo fetch 
      - save_rustup_cache

  build:
    executor:
      name: rust/default
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_rustup_cache
      - go/install:
          version: 1.17.3
      - run:
          name: install wasm32 target and cbindgen
          command: |
            rustup target add wasm32-unknown-unknown
            cargo install --force cbindgen
      - run:
          name: build
          command: |
            make

  clippy:
    executor:
      name: rust/default
    steps: 
      - checkout
      - attach_workspace:
          at: "."
      - restore_rustup_cache
      - run:
          name: make dummy example wasm module
          command: |
            # otherwise the include_bytes! macro fails because this file hasn't been generated
            touch examples/fvm/fvm_example_actor.wasm
      - rust/clippy:
          with_cache: false
          flags: |
            --all --all-targets

  rustfmt:
    executor:
      name: rust/default
    steps: 
      - checkout
      - attach_workspace:
          at: "."
      - restore_rustup_cache
      - rust/format:
          nightly-toolchain: true
          with_cache: false

commands:
  save_rustup_cache:
    steps:
      # if they exists delete old versions, for some reason cp fails otherwise
      - run: rm -rf /tmp/.rustup /tmp/.cargo || true
      # Move things from the home directory to `/tmp` first, so that it can be
      # restored on executors that have a different home directory.
      - run: cp -R ~/.cargo ~/.rustup /tmp/
      - save_cache:
          name: "Save rustup cache"
          key: cargo-v1-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
          paths:
            - /tmp/.cargo
            - /tmp/.rustup
  restore_rustup_cache:
    steps:
      - restore_cache:
          name: "Restore rustup cache"
          key: cargo-v1-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
      # Cache might not be created yet, hence ignore if the move fails
      - run: cp -R /tmp/.cargo /tmp/.rustup ~/ || true  


workflows:
  main:
    jobs:
      - cargo_fetch
      - rustfmt:
          requires:
            - cargo_fetch
      - clippy:
          requires:
            - cargo_fetch
      - build:
          requires:
            - cargo_fetch
